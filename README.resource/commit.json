{"compress":true,"commitItems":[["7cd2579f-7cac-4571-8e43-8ea882028d66",1574150921979,"# README\n\nAuthor：GJXAIOU\n\n该小项目1.0 仅仅作为自己熟悉 SSM 框架整合的 Demo，项目2.0使用 SpringBoot重新构建，将在后期补充。先熟练使用，再探究原理，从实践中弄懂如何做，从源码中弄懂为什么，加油😆\n\n## 一、整体说明\n\n技术架构： Spring  + SpringMVC  + MyBatis + MySQL + SUI Mobile\n\n工具：IDEA + Maven + Tomcat\n\n## 二、系统分解\n\n- 前端展示系统（完成）\n  - 头条展示\n  - 店铺类别展示\n  - 区域展示\n  - 店铺\n    - 列表展示\n    - 查询\n    - 详情\n  - 商品\n    - 列表展示\n    - 查询\n    - 详情\n\n- 店家管理系统（完成）\n  - local 账号维护\n  - 微信账号维护（未完成）\n  - 店铺信息维护\n  - 权限验证\n  - 商品类别维护\n- 超级管理员管理系统（未完成）\n  - 头条信息维护\n  - 店铺类别信息维护\n  - 区域信息维护\n  - 权限验证\n  - 店铺管理\n  - 用户管理\n\n## 二、数据库建表\n\n- 数据库名称：`o2o`\n- 数据表：\n  - `tb_area`：区域信息；包括：区域ID、区域名称、区域权重、区域创建时间、区域修改时间；\n  - `tb_head_line`：头条，即首页轮播图;包括：ID号、名称、图片、权重、状态、链接、创建时间、修改时间；\n  - `tb_shop_category`：店铺类别；包括：店铺类别ID号、名称、权重、描述、图片、上级ID、创建时间、修改时间；\n  - `tb_shop`：商铺信息；包括：店铺ID、店铺名称、店铺状态、店铺描述、店铺照片、店铺联系方式、店铺地址、店铺建议、店铺权重、店铺创建时间、店铺修改时间、店铺对应的区域ID、店铺对应的类别ID、店铺对应用户ID；\n  - `tb_product_category`：商品类别；商品类别ID、店铺ID、商品类别名、商品类别描述、商品类别优先级、创建时间、修改时间；\n  - `tb_product`：商品信息；包括：商品ID、商品名称、商品状态、商品描述、商品缩略图、商品原价、商品折扣价、商品权重、商品创建时间、商品修改时间、商品对应类别ID、商品对应店铺ID；\n  - `tb_product_img`：商品图片；包括：商品图片ID、商品ID、图片地址、图片描述、图片优先级、创建时间、修改时间；\n  - `tb_person_info`：用户信息；包括：用户ID、姓名、性别、头像、邮箱、状态、身份标识、创建时间、修改时间；\n  - `tb_local_auth`：本地用户信息，包括：本地用户 id，用户 id，用户名，密码，创建时间；\n  - `tb_wechat_auth`：微信用户信息；包括：微信open id、用户id、创建时间；\n\n\n\n## 三、系统设计\n\n### （一）根据数据库中表格生成对应的实体类（com.gjxaiou.entity）\n\n- `Area.java`\n- `Headline.java`\n- `ShopCategory.java`\n- `Shop.java`\n- `ProductCategory.java`\n- `Product.java`\n- `ProductImg.java`\n- `PersonInfo.java`\n- `LocalAuth.java`\n- `WeChatAuth.java`\n\n\n\n### （二）Maven 配置\n\n- 统一配置 Spring 版本为：`Spring 5.1.19.RELEASE`；参考[5.2.0 RELEASE Document](https://docs.spring.io/spring/docs/current/spring-framework-reference/)\n- 因为是 Demo，会经常对自己代码进行调试，使用 `junit 4.12`；\n- 一定要有的日志，这里使用 `logback 1.2.1`（log4j 的改良版）；\n- `mysql-connectr-java`  为8.0.17 以及 `c3p0 0.9.1.2` 连接池；\n- `Mybatis 3.4.2` 依赖以及 Mybatis 与 Spring依赖；\n- Servlet 方面的以及 `stl 1.2` 以及使用` Jackson 2.9.5` 作为 json 解析；\n- Map 工具类，对标准的 Java collection 的拓展；\n- kaptcha：用于生成验证码；\n- `lombok 1.18.10` 插件：为了自己做笔记方便，因此使用 lombok 插件；\n\n## （三）SSM 整合验证\n\n这里以实现区域查找功能为例，通过配置验证SSM配置；\n\n- 首先是 SSM 基本配置：\n    - `db.properties`  配置数据库连接信息；\n    - `mybatis-config`配置 MyBatis 的全局属性，包括使用 jdbc 的 getGeneratedKeys 获取数据库的自增主键值；\n    - `spring-dao.xml` 配置整合 Mybatis  的过程，包括数据库相关参数配置文件（db.properties）位置，数据库连接池（数据库连接池属性， 关闭自动提交等等），配置 SqlSessionFactory 对象，配置扫描 Dao 接口包，实现交由 Spring 容器管理；\n    - `spring-service.xml` 首先配置扫描 service 包下面所有使用注解的类型，然后配置事务管理器，同时配置基于注解的声明式事务；\n    - `spring-web.xml` 配置 SpringMVC，开启 SpringMVC 的注解模式，配置静态资源位置，自定义视图解析器，文件上传解析器；\n    - `web.xml` 配置 DispatcherServlet，即 SpringMVC 需要加载的配置文件\n    \n- 日志配置：\n  \n    - 配置日志的记录级别，保存时间，输出位置，输出格式等；\n    \n    ## 四、具体实践\n\n### （一）区域管理\n\n- 功能一：列出所有的区域列表\n  - 涉及的类\n    - com.gjxaiou.dao.AreaDao.java\n    - resources.mapper.AreaDao.xml\n    - com.gjxaiou.service.AreaService.java\n    - com.gjxaiou.sercive.impl.AreaService.java\n    - com.gjxaiou.web.superadmin.AreaController.java\n- 功能二：删除某个区域（待补充）\n\n###  (二) 店铺类别管理\n\n- 功能一：列出所有店铺类别\n\n  - 涉及的类\n\n    - com.gjxaiou.dao.ShopCategoryDao.java\n\n    - resources.mapper.ShopCategoryDao.xml\n\n    - com.gjxaiou.service.ShopCategoryService.java\n\n    - com.gjxaiou.service.impl.ShopCategoryService.java\n\n      \n\n- 功能二：删除某个店铺类别（待补充）\n\n### (三) 店铺管理\n\n- 功能一：店铺\n\n\n\n注意：为什么使用 dto:\n\nDTO(data transfer object):数据传输对象，以前被称为值对象(VO,value object)，作用仅在于在应用程序的各个子系统间传输数据，在表现层展示。与POJO对应一个数据库实体不同，DTO并不对应一个实体，可能仅存储实体的部分属性或加入符合传输需求的其他的属性。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n- \n- \n- com.gjxaiou.entity：数据库表对应的实体类；\n- Dao 层：\n    - 首先创建 AreaDao 接口（com.gjxaiou.dao.AreaDao.java），声明查询区域列表的方法；\n    - 然后创建 AreaDao.xml（resources.mapper.AreaDao.xml），其中 `namespace` 是声明对应的 Dao 接口，因为是查询要求，因此使用 `<select/>`标签，其中 `id ` 表示 对应的方法名，`resultType`表示返回值类型，这里只需要返回 `Area`对象即可；然后最后加上对应的 SQL 语句；\n- service 层： AreaService.java 与  AreaServiceImpl.java   \n    - service 层一般包含一个接口和一个实现类，接口是想要执行的方法，然后在实现类中实现该方法，该方法调用 Dao 层中的查询方法；\n    - 其实现类 XXXService.xml 返回想要的数据是给 controller 中的；\n    - 实现类中使用 `@Service` 和 `@Autowired` 表示交给 Spring 管理；\n- Controller 层: AreaController.java（com.gjxaiou.web.superadmin.AreaController.java）\n    - 首先 controller 层依赖于 service 层，因此首先创建 service 对象，将 service 实体类交个 Spring 管理；\n    - 定义方法接受 service 层处理之后的对象，这里接收到的是 List 集合，这里使用 Map 存放返回值，因为是 `select`，所以返回的是受影响的行数；\n    - 这里使用 logback 实现运行过程中的日志输出；\n- 功能测试\n  - 首先通过 BaseTest 类，实现初始化 Spring 容器，所有其他 Test 类都继承该类；\n  - 验证 AreaDao 类，即调用查询方法，看结果和数据库中数据数目是否相同；\n  - 验证 AreaServiceTest 类，可以查看查询里面具体内容是否和数据库中数据相同；\n\n## （三）店铺商家管理系统\n包括：店铺和商品模块\n首先应该应有店铺然后才有商品模块，因此先从店铺商家管理系统开始设计，主要实现店铺的增删改查；\n\n~~下面目录中仅仅实现了店铺的新增和更新功能，其他功能后续增加~~\n\n#### 1.Dao层\n\n- shopDao\n- shopExecution ：保存返回信息\n- shopStateEnume：定义所有 shop 可能的返回值\n\n#### 2.service 层（需要事务处理）\n首先需要将店铺信息插入到数据库中，然后返回这个店铺的 Id，根据该店铺的 Id 创建存储该店铺图片的文件夹，在该文件夹下面处理图片，最后将文件夹地址更新会这条数据\n以上任何一步出错都要回滚 -> 需要事务处理；\n\n#### 3.controller 层\n放在包 web.shopadmin 下面，店家管理后台的 controller都放在这里\n\n- ShopManagerController ：负责店铺管理相关逻辑\n- HttpServletRequestUtil：负责解析 HttpServletRequest 请求的参数\n\n注： pom 中 的 jackson-databind.jar 负责将实体类转换为 json或者反过来转换\n\n\n#### 4.前端页面\n使用 阿里巴巴的 SUI Mobile\n使用这个 demo ：http://m.sui.taobao.org/demos/form/label-input/ ,然后右击获取源代码，并且引入静态资源（将 Link 和 script\n 内容替换），参考：http://m.sui.taobao.org/getting-started/\n\n - 然后将页面放在 WEB-INF 下的 html/shop 下面，然后配置 shopadmin/shopAdminController.java 来访问，因为该文件夹下面资源文件不能直接访问；\n\n - 然后编写： webapp/resources/js/shop/shopOperation.js\n\n ### 需要的方法补写\n\n 因为上面涉及到了 getshopinitinfo 方法，该方法返回区域和商铺类别相关信息，应为当前以及实现了区域列表，但是 shopCategory 还么有实现，所以从 dao层开始实现；\n - shopCategoryDao.java 和对应的 Mapper文件\n\n - service 层：一个接口，一个实现类\n - shopManagerController 中实现控制层： getinitinfo 方法，该方法获取区域和商铺类别相关信息然后返回给前台\n\n\n### 上面 前端中的 验证码功能使用 ：\n - 导包 Kaptcha\n - web.xml 中使用servlet 生成验证码的相关设置\n - shopOperation.html 中引入验证码控件\n 其中控件中有点击方法，点击就换一张验证码图片，因此使用 js/common/common.js 实现，然后在 shopOperation.js\n    中将生成的验证码传入，最后在 shopOperation.HTML 中引入上面的 js\n  \n- 同样后端实现方法 CodeUtil.java 实现判断验证码是否正确  ;\n- 最后在 ShopManagerController.java  的添加店铺之前进行验证\n\n\n\n\n### thumbnailator 使用\n1. 导包\n2. util包下面添加 ImageUtil 方法\n该方法中实现了图片的一般操作方法，这里的方法可以自定义。但是如果是批量处理图片，需要平凡的获取图片文件路径，\n因此新建一个 PathUtil.java 类，里面实现获取输入文件路径和输出文件路径；\n\n\n\n\n\n\n\n## 补充：数据库实现主从读写分离\n\n### （一）数据库配置\nMySQL 的主从复制功能不仅可以实现数据的多处自动备份，从而实现数据库的拓展。同时多个数据备份不仅可以加强数据的安全性，同时通过读写分离还能进一步提升数据库的负载性能。\n\n在一主多从的数据库体系中，多个从服务器采用异步的方式更新主数据库的变化，**业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的，读操作则是在各从服务器上进行**。如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题，关于负载均衡具体的技术细节还没有研究过，本项目中实现一主一从的主从复制功能，一主多从的复制和读写分离的模型见下：\n![一主多从数据库体系]($resource/%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%93%E7%B3%BB.jpg)\n\n**主从同步工作过程：**\n\n首先主服务器（Master）对数据的操作记录到二进制日志（Binary log）文件中（即在每个事务的更新事件完成之前，Master 在日志中都会记录这些改变，MySQL 串行的将事务写入二进制文件中，写入完成之后 Master 通知存储引擎提交事务），然后从服务器（Slave）开启一个 IO 线程保持与主服务器的同学，如果发现 Master 二进制日志文件发生改变， 将 binary log 拷贝然后写入从服务器的中心日志（ Relay log）中，即将主服务器的操作同步到 Relay log  中，最后从服务器重新开启一个 SQL线程，将刚才同步过来的操作在从服务器中进行执行，从而实现从数据库和主数据库的一致性，也实现了主从复制。\n\n![主从数据同步]($resource/%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5.jpg)\n\n**具体配置：**\n一共使用两台虚机实现数据库的读写分离，虚机一：CentOS7Mini：192.168.238.136，为主数据库，虚机二：CentOS7MiniClone：192.168.238.135，为从数据库；\n*   主服务器：\n    *   开启二进制日志\n    *   配置唯一的 server-id\n    *   获得 master 二进制日志文件名及位置\n    *   创建一个用于 slave 和 master 通信的用户账号\n*   从服务器：\n    *   配置唯一的 server-id\n    *   使用 master 分配的用户账号读取 master 二进制日志\n    *   启用 slave 服务\n\n\n- 虚拟机一：Master 主机\n  - 修改 `/etc/my.cnf` 中配置 \n\n```linux\nserver-id=1 # 设置 server-id\nlog-bin=master-bin # 开启二进制文件\nlog-bin-index=master-bin.index\n```\n- 然后进入 MySQL：\n```mysql\ncreate user 'repl'@'192.168.238.135' identified by 'GJXAIOU_o2o'; # 创建主从直接的通信账号\ngrant replication slave on *.* to 'repl'@'192.168.238.135';# 授予该账号读取主服务器中所有数据库的所有表的权限\n```\n- 然后重启数据库 ：`sudo service mysqld restart`\n- 然后进入 MySQL：\n```mysql\nflush privileges;\nshow master status; # 查看二进制日志文件状态\n```\n这里结果如下：\n```mysql\n+----------+----------+--------------+------------------+-------------------+\n| File  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+--------+----------+--------------+------------------+-------------------+\n| master-bin.000002 |     1265 |          |              |                 |\n+-------------+----------+------------+----------------+----------------+\n1 row in set (0.00 sec)\n```\n- 注：如果配置错误，则可以在 mysql 中删除用户：`drop user 'repl'@'192.168.238.135'` \n\n\n- 虚拟机二中同样配置\n  - 首先修改 `/etc/my.cnf`\n```linux\nserver-id=2\nrelay-log-index=slave-relay-bin.index\nrelay-log=slave-relay-bin\n```\n- 从库重启 mysql 之后，打开 mysql 回话，执行下面语句；\n```mysql\nCHANGE MASTER TO  MASTER_HOST='192.168.238.136',master_user='repl',master_password='GJXAIOU_o2o',master_log_file='master-bin.000002',master_log_pos=1265;\n```\n访问主库的IP地址，从 3306端口访问，使用 repl 账号，密码是 GJXAIOU_o2o，读取的文件是 `master-bin.000002`，从 1265 位置开始读取；\n\n- 开启主从跟踪和查看从库状态\n```mysql\nstart slave; # 开启主从跟踪\nshow slave status \\G; # 查看从库状态\n```\n\n- 可以使用 `stop slave`关闭主从跟踪；\n\n**补充：设置还原**\n当设置有问题的时候可以使用还原设置来重新配置；\n- 主库设置还原：`reset master;`\n- 从库设置还原：`reset slave all;`\n\n\n**补充：从 Windows 导入数据库到 CentOS 中**\n- 首先将 Windows  的数据库导出\ncmd 中使用：`mysqldump -u用户名 -p 数据库名 数据表名 > 导出的数据库位置和名称`，这里是：`mysqldump -uroot -p o2o > D:\\o2o.sql`\n- 将该数据库导入到 CentOS 中\n这里使用 xshell 连接服务器，首先需要在服务器中安装文件传输工具：lrzsz，命令为：`sudo yum install -y lrzsz`；\n然后在 xshell 中找到该服务器的属性，设置文件的上传下载路径；\n然后进入 CentOS 中的 o2o 目录中（自己定义 ），使用命令 ：`rz`然后回车，选择需要上传的文件即可；`rz`：表示上传，`sz`：表示下载；\n\n- 导入数据库\n服务器端进入数据库，然后新建数据库：`create database o2o;`，然后`use o2o;`，最后将上传的数据库文件导入：`source o2o.sql`，后面是刚才上传文件放置的位置；\n\n\n### （二）代码上实现读写分离\n\n因为是 Dao层，因此创建包 `com.gjxaiou.dao.split`，里面放置读写分离的方法\n\n- 新建 `DynamicDataSource.java`  方法，该方法实现 spring 中的 determineCurrentLookupKey() 方法，最终根据方法的返回值（key）的不同来区分不同的数据源；\n这里调用了另一个类 DynamicDataSourceHolder 来具体设置 key 的值以及返回方法，\n\n- 然后设置 mybatis 的拦截器，通过类 DynamicDataSourceInterceptor 完成，因为上面部分完成路由功能，但是使用该路由靠拦截器，因为拦截器会拦截 mybatis 传递进来的 SQL 信息，然后可以根据 SQL信息，如 insert 、update 则采用写的数据源，反之采用读的数据源；\n\n然后在mybatis 配置文件中配置；mybatis-config 中配置拦截器\n\n最后在 Spring -dao 中重写配置 DataSource，包括 db.properties\n\n\n\n### 店铺信息的编辑\n\n###### 实现目标：\n\n- 实现单个店铺信息的获取；\n- 实现对店铺信息进行修改；\n\n\n\n#### 获取店铺信息\n\nDao：shopDao.java 中添加 查询方法；\n\n配置 对应的 xml 方法；\n\n\n\nService 层：针对 ShopService 主要增加： 通过店铺 Id 获取店铺信息，和更新店铺信息（包括对图片的处理）\n\n然后在对应的实现类中实现；\n\n```\ngetByShopId\n```\n\n```\nmodifyShop\n```\n\n\n\nController 层：\n\n前端：shopOperation.js  和 common.js\n\n\n\n### 分页查询展示店铺\n\n// 说明待补充\n\n\n\n\n\n### 商品类别列表展示\n\n实体类是 ProductCategory\n\n首先 Dao 层接口 ProductCategoryDao.java 和 对应的Mapper 然后使用 ProductCategoryTest 中 testAQueryByShopId 方法进行测试\n\n然后是 Service 层 ProductCategoryService 和实现类；\n\n最后是 controller 层 ProductCategoryManagementController\n\n###### 前端页面：product-category-management.html 和对应的 CSS 布局；和对应的 productCategoryManagement.js 文件 （最后通过标签将 CSS 、js 代码引入 html 中）\n\n然后是 shopAdminController.java 中实现路由，通过访问\n\n\n\n### 商品类别批量添加\n\n// 说明待补充\n\n\n\n\n\n### 商品类别删除\n\n// 说明待补充\n\n\n\n\n\n\n\n\n\n\n\n### 补充：权限管理\n\n项目中一共有两处进行了权限管理：\n\n- ShopLoginInterceptor：店家管理系统拦截器\n- shopPermissionInteceptor：店铺操作权限拦截器\n\n#### （一）具体实现\n\n这里的拦截器的实现，都是继承抽象类：HandlerInterceptorAdaptor（该抽象类实现了 AsyncHandlerInterceptor 接口，里面除了构造器之外还有四个方法：preHandle/postHandle/afterCompletion/afterConcurrentHandlingStarted），\n\n- shopLoginInterceptor：主要是进行用户操作权限的拦截（必须登录才能操作店铺），因此属于事前拦截（即在用户操作之前进行拦截执行），因此只需要重写 PreHandle（） 方法即可；\n  - 首先从 session 中根据 key：`user` 获取用户信息；\n  - 然后判断用户信息是否存在，如果存在且状态正常（类型为店家）则返回 true，同时可进行后续操作；\n  - 如果用户信息不存在则需要跳转用户登录状态；\n\n- shopPermissionInteceptor：主要是判断当前登录的用户能否操作该店铺，因为也必须是在操作（controller ）之前进行判断，因此还是重写：PreHandle() 方法即可；\n  - 首先从 session中的 request.getSession().getAttribute() 方法，通过 key：`currentShop`获取当前选择的店铺；\n  - 然后从 session 中获取该用户可以操作的店铺列表；\n  - 遍历返回的列表，使用 equals 方法比较 shopId 即可，如果在列表中，返回 true，可以继续操作；\n  - 反之返回 false，提示没有操作权限即可；\n- springMVC 的配置文件配置：在 spring-web.xml 文件中配置拦截器，因为这里是两个拦截器，需要分别进行配置；\n  - 首先就是配置拦截器类的 <bean> 标签，然后配置该拦截器拦截哪些 controller，这里设置是：`path = \"/shopAdmin/**\"`，即拦截该包下面的所有controller。",[[1574150890624,["GJX@GJXAIOUPC",[[1,11378,"\n  - "]],[11378,11378],[11383,11383]]],[1574150891509,["GJX@GJXAIOUPC",[[-1,11379,"  - "],[1,11383,"\n\n"]],[11383,11383],[11380,11380]]],[1574150894617,["GJX@GJXAIOUPC",[[1,11380,"#### （）"]],[11380,11380],[11387,11387]]],[1574150895739,["GJX@GJXAIOUPC",[[1,11386,"二"]],[11386,11386],[11387,11387]]],[1574150898033,["GJX@GJXAIOUPC",[[1,11388,"知识"]],[11388,11388],[11390,11390]]],[1574150901166,["GJX@GJXAIOUPC",[[1,11388,"原理"]],[11388,11388],[11390,11390]]],[1574150903648,["GJX@GJXAIOUPC",[[1,11393,"\n"]],[11392,11392],[11393,11393]]],[1574150958799,["GJX@GJXAIOUPC",[[-1,11393,"\n"],[1,11394,"-"]],[11393,11393],[11394,11394]]],[1574150965404,["GJX@GJXAIOUPC",[[1,11394," 这里实现自定义的"]],[11394,11394],[11403,11403]]],[1574150966733,["GJX@GJXAIOUPC",[[-1,11402,"的"]],[11403,11403],[11402,11402]]],[1574150977872,["GJX@GJXAIOUPC",[[1,11402,"拦截器可以直接实现 "]],[11402,11402],[11412,11412]]],[1574150988048,["GJX@GJXAIOUPC",[[1,11412,"HandlerAdapter "]],[11412,11412],[11427,11427]]],[1574150991516,["GJX@GJXAIOUPC",[[-1,11419,"Adapter "]],[11427,11427],[11419,11419]]],[1574151012999,["GJX@GJXAIOUPC",[[1,11419,"Interceptor 接口或者继承实现上面接口的类（）"]],[11419,11419],[11447,11447]]],[1574151032178,["GJX@GJXAIOUPC",[[1,11446,"例如：HandlerInterceptor "]],[11446,11446],[11468,11468]]],[1574151032861,["GJX@GJXAIOUPC",[[-1,11467," "]],[11468,11468],[11467,11467]]],[1574151036017,["GJX@GJXAIOUPC",[[1,11467,"Adaptor "]],[11467,11467],[11475,11475]]],[1574151040011,["GJX@GJXAIOUPC",[[1,11476,","]],[11476,11476],[11477,11477]]],[1574151040063,["GJX@GJXAIOUPC",[[-1,11476,","],[1,11477,"，"]],[11477,11477],[11477,11477]]],[1574151040836,["GJX@GJXAIOUPC",[[-1,11476,"，"]],[11477,11477],[11476,11476]]],[1574151041292,["GJX@GJXAIOUPC",[[-1,11475,"）"]],[11476,11476],[11475,11475]]],[1574151043361,["GJX@GJXAIOUPC",[[1,11475,"),"]],[11475,11475],[11477,11477]]],[1574151043412,["GJX@GJXAIOUPC",[[-1,11476,","],[1,11477,"，"]],[11477,11477],[11477,11477]]],[1574151044272,["GJX@GJXAIOUPC",[[1,11477,"zl"]],[11477,11477],[11479,11479]]],[1574151044884,["GJX@GJXAIOUPC",[[-1,11477,"zl"]],[11479,11479],[11477,11477]]],[1574151072281,["GJX@GJXAIOUPC",[[1,11477,"这里使用后者；\n- 拦截顺序：请求"]],[11477,11477],[11494,11494]]],[1574151080125,["GJX@GJXAIOUPC",[[-1,11492,"请求"]],[11494,11494],[11492,11492]]],[1574151081709,["GJX@GJXAIOUPC",[[1,11492,"per"]],[11492,11492],[11495,11495]]],[1574151082711,["GJX@GJXAIOUPC",[[-1,11493,"er"]],[11495,11495],[11493,11493]]],[1574151085016,["GJX@GJXAIOUPC",[[1,11493,"reHanl"]],[11493,11493],[11499,11499]]],[1574151086054,["GJX@GJXAIOUPC",[[-1,11498,"l"]],[11499,11499],[11498,11498]]],[1574151091864,["GJX@GJXAIOUPC",[[1,11498,"dle ->c"]],[11498,11498],[11505,11505]]],[1574151092300,["GJX@GJXAIOUPC",[[-1,11504,"c"]],[11505,11505],[11504,11504]]],[1574151097349,["GJX@GJXAIOUPC",[[1,11504," controller ->peos"]],[11504,11504],[11522,11522]]],[1574151098286,["GJX@GJXAIOUPC",[[-1,11519,"eos"]],[11522,11522],[11519,11519]]],[1574151100562,["GJX@GJXAIOUPC",[[1,11519,"ostHan"]],[11519,11519],[11525,11525]]],[1574151102658,["GJX@GJXAIOUPC",[[1,11525,"der"]],[11525,11525],[11528,11528]]],[1574151103995,["GJX@GJXAIOUPC",[[-1,11526,"er"]],[11528,11528],[11526,11526]]],[1574151106698,["GJX@GJXAIOUPC",[[1,11526,"le ->js"]],[11526,11526],[11533,11533]]],[1574151107375,["GJX@GJXAIOUPC",[[-1,11531,"js"]],[11533,11533],[11531,11531]]],[1574151110687,["GJX@GJXAIOUPC",[[1,11531," jsp ->"]],[11531,11531],[11538,11538]]],[1574151114048,["GJX@GJXAIOUPC",[[1,11518," "]],[11518,11518],[11519,11519]]],[1574151136094,["GJX@GJXAIOUPC",[[1,11539," afterCompletion\n- duoge"]],[11539,11539],[11563,11563]]],[1574151137043,["GJX@GJXAIOUPC",[[-1,11558,"duoge"]],[11563,11563],[11558,11558]]],[1574151149251,["GJX@GJXAIOUPC",[[1,11558,"多个拦截器拦截顺序：“"]],[11558,11558],[11569,11569]]],[1574151149979,["GJX@GJXAIOUPC",[[-1,11568,"“"]],[11569,11569],[11568,11568]]],[1574151163440,["GJX@GJXAIOUPC",[[1,11568,"P"]],[11568,11568],[11569,11569]]],[1574151164445,["GJX@GJXAIOUPC",[[-1,11568,"P"]],[11569,11569],[11568,11568]]],[1574151167337,["GJX@GJXAIOUPC",[[1,11568,"preHanl"]],[11568,11568],[11575,11575]]],[1574151168059,["GJX@GJXAIOUPC",[[-1,11574,"l"]],[11575,11575],[11574,11574]]],[1574151170360,["GJX@GJXAIOUPC",[[1,11574,"dle !"]],[11574,11574],[11579,11579]]],[1574151171155,["GJX@GJXAIOUPC",[[-1,11578,"!"]],[11579,11579],[11578,11578]]],[1574151176133,["GJX@GJXAIOUPC",[[1,11578,"A -> per"]],[11578,11578],[11586,11586]]],[1574151176715,["GJX@GJXAIOUPC",[[-1,11584,"er"]],[11586,11586],[11584,11584]]],[1574151188681,["GJX@GJXAIOUPC",[[1,11584,"reHandle B -> controller ->pst"]],[11584,11584],[11614,11614]]],[1574151189387,["GJX@GJXAIOUPC",[[-1,11612,"st"]],[11614,11614],[11612,11612]]],[1574151196632,["GJX@GJXAIOUPC",[[1,11612,"ostHandle B - >"]],[11612,11612],[11627,11627]]],[1574151197179,["GJX@GJXAIOUPC",[[-1,11625," >"]],[11627,11627],[11625,11625]]],[1574151199793,["GJX@GJXAIOUPC",[[1,11625,"> pso"]],[11625,11625],[11630,11630]]],[1574151200750,["GJX@GJXAIOUPC",[[-1,11628,"so"]],[11630,11630],[11628,11628]]],[1574151203343,["GJX@GJXAIOUPC",[[1,11628,"ostHanl"]],[11628,11628],[11635,11635]]],[1574151203731,["GJX@GJXAIOUPC",[[-1,11634,"l"]],[11635,11635],[11634,11634]]],[1574151209263,["GJX@GJXAIOUPC",[[1,11634,"dle A - >"]],[11634,11634],[11643,11643]]],[1574151210772,["GJX@GJXAIOUPC",[[-1,11640,"- >"]],[11643,11643],[11640,11640]]],[1574151213310,["GJX@GJXAIOUPC",[[1,11640,"->j"]],[11640,11640],[11643,11643]]],[1574151213828,["GJX@GJXAIOUPC",[[-1,11642,"j"]],[11643,11643],[11642,11642]]],[1574151214689,["GJX@GJXAIOUPC",[[1,11642," jsap"]],[11642,11642],[11647,11647]]],[1574151215603,["GJX@GJXAIOUPC",[[-1,11645,"ap"]],[11647,11647],[11645,11645]]],[1574151218058,["GJX@GJXAIOUPC",[[1,11645,"p ->"]],[11645,11645],[11649,11649]]],[1574151221121,["GJX@GJXAIOUPC",[[1,11649,"a"]],[11649,11649],[11650,11650]]],[1574151222515,["GJX@GJXAIOUPC",[[-1,11649,"a"]],[11650,11650],[11649,11649]]],[1574151226840,["GJX@GJXAIOUPC",[[1,11649," afterConp"]],[11649,11649],[11659,11659]]],[1574151227773,["GJX@GJXAIOUPC",[[-1,11657,"np"]],[11659,11659],[11657,11657]]],[1574151228391,["GJX@GJXAIOUPC",[[1,11657,"jm"]],[11657,11657],[11659,11659]]],[1574151229132,["GJX@GJXAIOUPC",[[-1,11657,"jm"]],[11659,11659],[11657,11657]]],[1574151248185,["GJX@GJXAIOUPC",[[1,11657,"mpletion B ->afterCompletion A;"]],[11657,11657],[11688,11688]]],[1574151248236,["GJX@GJXAIOUPC",[[-1,11687,";"],[1,11688,"；"]],[11688,11688],[11688,11688]]],[1574151251714,["GJX@GJXAIOUPC",[[1,11555,";"]],[11555,11555],[11556,11556]]],[1574151251767,["GJX@GJXAIOUPC",[[-1,11555,";"],[1,11556,"；"]],[11556,11556],[11556,11556]]],[1574151252253,["GJX@GJXAIOUPC",[[1,11559,"\n- "]],[11556,11556],[11559,11559]]],[1574151253694,["GJX@GJXAIOUPC",[[-1,11557,"- "]],[11559,11559],[11557,11557]]],[1574151254150,["GJX@GJXAIOUPC",[[-1,11557,"\n"]],[11557,11557],[11556,11556]]],[1574151263624,["GJX@GJXAIOUPC",[[1,11689,"\n- S"]],[11689,11689],[11693,11693]]],[1574151264373,["GJX@GJXAIOUPC",[[-1,11692,"S"]],[11693,11693],[11692,11692]]],[1574151269543,["GJX@GJXAIOUPC",[[1,11692,"spring "]],[11692,11692],[11699,11699]]],[1574151270156,["GJX@GJXAIOUPC",[[-1,11698," "]],[11699,11699],[11698,11698]]],[1574151272464,["GJX@GJXAIOUPC",[[1,11698,"MVC lan"]],[11698,11698],[11705,11705]]],[1574151273124,["GJX@GJXAIOUPC",[[-1,11702,"lan"]],[11705,11705],[11702,11702]]],[1574151273937,["GJX@GJXAIOUPC",[[1,11702,"Lna"]],[11702,11702],[11705,11705]]],[1574151274813,["GJX@GJXAIOUPC",[[-1,11702,"Lna"]],[11705,11705],[11702,11702]]],[1574151278065,["GJX@GJXAIOUPC",[[1,11702,"拦截器拦截的"]],[11702,11702],[11708,11708]]],[1574151279460,["GJX@GJXAIOUPC",[[-1,11705,"拦截的"]],[11708,11708],[11705,11705]]],[1574151280737,["GJX@GJXAIOUPC",[[1,11705,"与"]],[11705,11705],[11706,11706]]],[1574151284633,["GJX@GJXAIOUPC",[[1,11706," AOP 区别：\n- "]],[11706,11706],[11717,11717]]],[1574151285933,["GJX@GJXAIOUPC",[[1,11715,"  "]],[11717,11717],[11719,11719]]],[1574151313246,["GJX@GJXAIOUPC",[[1,11719,"spring MVC 拦截的是请求，即只能拦截 controller，发动"]],[11719,11719],[11756,11756]]],[1574151314399,["GJX@GJXAIOUPC",[[-1,11754,"发动"]],[11756,11756],[11754,11754]]],[1574151323451,["GJX@GJXAIOUPC",[[1,11754,"发送请求时候被烂机器"]],[11754,11754],[11764,11764]]],[1574151325468,["GJX@GJXAIOUPC",[[-1,11761,"烂机器"]],[11764,11764],[11761,11761]]],[1574151329360,["GJX@GJXAIOUPC",[[1,11761,"拦截器拦截，在"]],[11761,11761],[11768,11768]]],[1574151333748,["GJX@GJXAIOUPC",[[-1,11767,"在"]],[11768,11768],[11767,11767]]],[1574151336763,["GJX@GJXAIOUPC",[[1,11767,"拦截之后在"]],[11767,11767],[11772,11772]]],[1574151347584,["GJX@GJXAIOUPC",[[1,11772,"控制器周围"]],[11772,11772],[11777,11777]]],[1574151348390,["GJX@GJXAIOUPC",[[-1,11775,"周围"]],[11777,11777],[11775,11775]]],[1574151353591,["GJX@GJXAIOUPC",[[1,11775,"前后增加二外"]],[11775,11775],[11781,11781]]],[1574151354939,["GJX@GJXAIOUPC",[[-1,11779,"二外"]],[11781,11781],[11779,11779]]],[1574151368762,["GJX@GJXAIOUPC",[[1,11779,"额外的功能；\n  - AOP 拦截的是方法，"]],[11779,11779],[11801,11801]]],[1574153115698,["GJX@GJXAIOUPC",[[1,11801,"、a"]],[11801,11801],[11803,11803]]],[1574153115985,["GJX@GJXAIOUPC",[[-1,11801,"、a"]],[11803,11803],[11801,11801]]],[1574153118893,["GJX@GJXAIOUPC",[[1,11801,"AOP lanji"]],[11801,11801],[11810,11810]]],[1574153120137,["GJX@GJXAIOUPC",[[-1,11805,"lanji"]],[11810,11810],[11805,11805]]],[1574153125733,["GJX@GJXAIOUPC",[[1,11805,"拦截的是特定的反复"]],[11805,11805],[11814,11814]]],[1574153126609,["GJX@GJXAIOUPC",[[-1,11812,"反复"]],[11814,11814],[11812,11812]]],[1574153128042,["GJX@GJXAIOUPC",[[1,11812,"方法（）"]],[11812,11812],[11816,11816]]],[1574153139573,["GJX@GJXAIOUPC",[[1,11815,"被 Spring 管理，一般为 service "]],[11815,11815],[11839,11839]]],[1574153140522,["GJX@GJXAIOUPC",[[-1,11838," "]],[11839,11839],[11838,11838]]],[1574153142744,["GJX@GJXAIOUPC",[[1,11838,"Implement"]],[11838,11838],[11847,11847]]],[1574153145497,["GJX@GJXAIOUPC",[[-1,11841,"lement"]],[11847,11847],[11841,11841]]],[1574153149519,["GJX@GJXAIOUPC",[[1,11841,"l zhong "]],[11841,11841],[11849,11849]]],[1574153151017,["GJX@GJXAIOUPC",[[-1,11843,"zhong "]],[11849,11849],[11843,11843]]],[1574153153016,["GJX@GJXAIOUPC",[[1,11843,"中方法"]],[11843,11843],[11846,11846]]],[1574153167636,["GJX@GJXAIOUPC",[[1,11847,"，并在其前后进行补充；"]],[11847,11847],[11858,11858]]],[1574153535298,["GJX@GJXAIOUPC",[[1,11858,"\n  - "]],[11858,11858],[11863,11863]]],[1574153535451,["GJX@GJXAIOUPC",[[-1,11859,"  - "],[1,11863,"\n\n"]],[11863,11863],[11860,11860]]],[1574153535605,["GJX@GJXAIOUPC",[[1,11861,"\n"]],[11860,11860],[11861,11861]]],[1574153544418,["GJX@GJXAIOUPC",[[1,11862,"### 补充：权限管理\n"]],[11861,11861],[11873,11873]]],[1574153546417,["GJX@GJXAIOUPC",[[-1,11869,"权限管理"]],[11873,11873],[11869,11869]]],[1574153549872,["GJX@GJXAIOUPC",[[1,11869,"Redis"]],[11869,11869],[11874,11874]]],[1574153550262,["GJX@GJXAIOUPC",[[1,11875,"\n"]],[11874,11874],[11875,11875]]],[1574153562601,["GJX@GJXAIOUPC",[[-1,10397,"\n"]],[10396,10396],[10395,10395]]],[1574153562738,["GJX@GJXAIOUPC",[[-1,10396,"\n"]],[10395,10395],[10394,10394]]],[1574153562899,["GJX@GJXAIOUPC",[[-1,10395,"\n"]],[10394,10394],[10393,10393]]],[1574153563030,["GJX@GJXAIOUPC",[[-1,10394,"\n"]],[10393,10393],[10392,10392]]],[1574153563156,["GJX@GJXAIOUPC",[[-1,10393,"\n"]],[10392,10392],[10391,10391]]],[1574153563275,["GJX@GJXAIOUPC",[[-1,10392,"\n"]],[10391,10391],[10390,10390]]],[1574153563396,["GJX@GJXAIOUPC",[[-1,10391,"\n"]],[10390,10390],[10389,10389]]],[1574153564024,["GJX@GJXAIOUPC",[[-1,10390,"\n"]],[10389,10389],[10388,10388]]],[1574153566385,["GJX@GJXAIOUPC",[[-1,10365,"\n"]],[10363,10363],[10362,10362]]],[1574153566554,["GJX@GJXAIOUPC",[[-1,10364,"\n"]],[10362,10362],[10361,10361]]],[1574153567320,["GJX@GJXAIOUPC",[[-1,10363,"\n"]],[10363,10363],[10362,10362]]],[1574153573715,["GJX@GJXAIOUPC",[[1,10182,"\n"]],[10182,10182],[10183,10183]]],[1574153577443,["GJX@GJXAIOUPC",[[-1,9934,"\n"]],[9932,9933],[9932,9932]]],[1574153578081,["GJX@GJXAIOUPC",[[-1,9933,"\n"]],[9932,9932],[9931,9931]]],[1574153578539,["GJX@GJXAIOUPC",[[-1,9932,"\n"]],[9931,9931],[9930,9930]]],[1574153579305,["GJX@GJXAIOUPC",[[-1,9906,"\n"]],[9905,9905],[9904,9904]]],[1574153581809,["GJX@GJXAIOUPC",[[-1,9855,"\n"]],[9854,9854],[9853,9853]]],[1574153600722,["GJX@GJXAIOUPC",[[-1,5928,"\n"]],[5927,5927],[5926,5926]]],[1574153600930,["GJX@GJXAIOUPC",[[-1,5927,"\n"]],[5926,5926],[5925,5925]]],[1574153601329,["GJX@GJXAIOUPC",[[-1,5926,"\n"]],[5925,5925],[5924,5924]]],[1574153602353,["GJX@GJXAIOUPC",[[-1,5925,"\n"]],[5924,5924],[5923,5923]]],[1574153603179,["GJX@GJXAIOUPC",[[-1,5769,"\n"]],[5769,5769],[5768,5768]]],[1574153603658,["GJX@GJXAIOUPC",[[-1,5768,"\n"]],[5768,5768],[5767,5767]]],[1574153679437,["GJX@GJXAIOUPC",[[-1,11854,"\n"],[1,11855,"-"]],[11854,11854],[11855,11855]]],[1574153679629,["GJX@GJXAIOUPC",[[1,11855," "]],[11855,11855],[11856,11856]]],[1574153682281,["GJX@GJXAIOUPC",[[-1,11855," "]],[11856,11856],[11855,11855]]],[1574153682771,["GJX@GJXAIOUPC",[[-1,11854,"-"],[1,11855,"\n"]],[11855,11855],[11854,11854]]],[1574153683938,["GJX@GJXAIOUPC",[[1,11855,"\n"]],[11854,11854],[11855,11855]]],[1574153686650,["GJX@GJXAIOUPC",[[1,11855,"#### （）"]],[11855,11855],[11862,11862]]],[1574153688038,["GJX@GJXAIOUPC",[[1,11861,"一"]],[11861,11861],[11862,11862]]],[1574153689958,["GJX@GJXAIOUPC",[[1,11863,"首先"]],[11863,11863],[11865,11865]]],[1574153699118,["GJX@GJXAIOUPC",[[-1,11863,"首先"]],[11865,11865],[11863,11863]]],[1574153701270,["GJX@GJXAIOUPC",[[1,11863,"简介"]],[11863,11863],[11865,11865]]],[1574153701649,["GJX@GJXAIOUPC",[[1,11866,"\n"]],[11865,11865],[11866,11866]]],[1574153702904,["GJX@GJXAIOUPC",[[-1,11866,"\n"],[1,11867,"首先"]],[11866,11866],[11868,11868]]],[1574153716489,["GJX@GJXAIOUPC",[[1,11868," Redis 属于 NoSQL 中的 键值对数据库"]],[11868,11868],[11893,11893]]],[1574153731899,["GJX@GJXAIOUPC",[[-1,11889,"对"]],[11890,11890],[11889,11889]]],[1574153734262,["GJX@GJXAIOUPC",[[1,11889,"存储"]],[11889,11889],[11891,11891]]],[1574153737367,["GJX@GJXAIOUPC",[[1,11884,"（）"]],[11884,11884],[11886,11886]]],[1574153739948,["GJX@GJXAIOUPC",[[1,11885,"非关系"]],[11885,11885],[11888,11888]]],[1574153742215,["GJX@GJXAIOUPC",[[1,11888,"型数据库"]],[11888,11888],[11892,11892]]],[1574153746313,["GJX@GJXAIOUPC",[[-1,11883," "]],[11884,11884],[11883,11883]]],[1574153750721,["GJX@GJXAIOUPC",[[-1,11894," "]],[11895,11895],[11894,11894]]],[1574153754809,["GJX@GJXAIOUPC",[[1,11894,"**"],[1,11901,"**"]],[11894,11901],[11894,11905]]],[1574153782151,["GJX@GJXAIOUPC",[[1,11905,"，该类型的数据库一般使用 HashMap"]],[11905,11905],[11925,11925]]],[1574153794617,["GJX@GJXAIOUPC",[[-1,11917," HashMap"]],[11925,11925],[11917,11917]]],[1574153797109,["GJX@GJXAIOUPC",[[1,11917,"哈希表。"]],[11917,11917],[11921,11921]]],[1574153826306,["GJX@GJXAIOUPC",[[1,11921,"\n\n"]],[11921,11921],[11922,11922]]],[1574153826993,["GJX@GJXAIOUPC",[[1,11922,"- 优点:\n  - 对数据高并发读写\n  - 对海量数据的高效率存储和访问\n因为是基于内存级别的读取操作\n  - 对数据的可扩展性和高可用性\n\n- 缺点: \n  - redis(ACID处理非常简单）无法做到太复杂的关系数据库模型"]],[11922,11922],[12037,12037]]],[1574153829851,["GJX@GJXAIOUPC",[[1,11866,"- "]],[11866,11866],[11868,11868]]],[1574153832555,["GJX@GJXAIOUPC",[[1,11924,"\n"]],[11924,11924],[11925,11925]]],[1574153835754,["GJX@GJXAIOUPC",[[1,11866,"\n"]],[11866,11866],[11867,11867]]],[1574153870883,["GJX@GJXAIOUPC",[[1,11924,"键可以包含:( string)字符串,哈希,（List）链表,（Set）集合，(zset)有序集合。"]],[11924,11924],[11974,11974]]],[1574153875782,["GJX@GJXAIOUPC",[[1,11924,"R饿死啊"]],[11924,11924],[11928,11928]]],[1574153877383,["GJX@GJXAIOUPC",[[-1,11924,"R饿死啊"]],[11928,11928],[11924,11924]]],[1574153879382,["GJX@GJXAIOUPC",[[1,11924,"Redis  "]],[11924,11924],[11930,11930]]],[1574153879965,["GJX@GJXAIOUPC",[[1,11930,"中"]],[11930,11930],[11931,11931]]],[1574153881233,["GJX@GJXAIOUPC",[[-1,11931," "]],[11932,11932],[11931,11931]]],[1574153885008,["GJX@GJXAIOUPC",[[-1,11936,":"]],[11937,11937],[11936,11936]]],[1574153885510,["GJX@GJXAIOUPC",[[1,11936,"："]],[11936,11936],[11937,11937]]],[1574153887210,["GJX@GJXAIOUPC",[[-1,11938," "]],[11939,11939],[11938,11938]]],[1574153891705,["GJX@GJXAIOUPC",[[-1,11944,")字符串"]],[11944,11948],[11944,11944]]],[1574153895712,["GJX@GJXAIOUPC",[[-1,11937,"("]],[11938,11938],[11937,11937]]],[1574153899737,["GJX@GJXAIOUPC",[[-1,11943,","]],[11944,11944],[11943,11943]]],[1574153900301,["GJX@GJXAIOUPC",[[1,11943,"，"]],[11943,11943],[11944,11944]]],[1574153904114,["GJX@GJXAIOUPC",[[-1,11952,"）链表"]],[11955,11955],[11952,11952]]],[1574153906224,["GJX@GJXAIOUPC",[[-1,11947,"（"]],[11948,11948],[11947,11947]]],[1574153908199,["GJX@GJXAIOUPC",[[1,11947," "]],[11947,11947],[11948,11948]]],[1574153912640,["GJX@GJXAIOUPC",[[-1,11957,"）集合"]],[11960,11960],[11957,11957]]],[1574153914824,["GJX@GJXAIOUPC",[[-1,11953,"（"]],[11954,11954],[11953,11953]]],[1574153916028,["GJX@GJXAIOUPC",[[1,11953," "]],[11953,11953],[11954,11954]]],[1574153958560,["GJX@GJXAIOUPC",[[-1,11963,")有序集合"]],[11968,11968],[11963,11963]]],[1574153960376,["GJX@GJXAIOUPC",[[-1,11958,"("]],[11959,11959],[11958,11958]]],[1574154022954,["GJX@GJXAIOUPC",[[1,12081,"  - \n"]],[12080,12080],[12085,12085]]],[1574154024944,["GJX@GJXAIOUPC",[[-1,12082," - "]],[12085,12085],[12082,12082]]],[1574154038237,["GJX@GJXAIOUPC",[[1,11854,"具体的内容见：Java ->J"]],[11854,11854],[11869,11869]]],[1574154038721,["GJX@GJXAIOUPC",[[-1,11868,"J"]],[11869,11869],[11868,11868]]],[1574154046093,["GJX@GJXAIOUPC",[[1,11868," JavaNotes -> Redis"]],[11868,11868],[11887,11887]]],[1574154119226,["GJX@GJXAIOUPC",[[-1,12114," "],[1,12115,"\n"]],[12115,12115],[12115,12115]]],[1574154123501,["GJX@GJXAIOUPC",[[1,12115,"#### ()"]],[12115,12115],[12122,12122]]],[1574154125556,["GJX@GJXAIOUPC",[[1,12121,"shiyong"]],[12121,12121],[12128,12128]]],[1574154128968,["GJX@GJXAIOUPC",[[-1,12120,"(shiyong)"]],[12128,12128],[12120,12120]]],[1574154129638,["GJX@GJXAIOUPC",[[1,12120,"（）"]],[12120,12120],[12122,12122]]],[1574154131485,["GJX@GJXAIOUPC",[[1,12121,"使用"]],[12121,12121],[12123,12123]]],[1574154132697,["GJX@GJXAIOUPC",[[-1,12121,"使用"]],[12123,12123],[12121,12121]]],[1574154133350,["GJX@GJXAIOUPC",[[1,12121,"二"]],[12121,12121],[12122,12122]]],[1574154135215,["GJX@GJXAIOUPC",[[1,12123,"使用"]],[12123,12123],[12125,12125]]],[1574154141766,["GJX@GJXAIOUPC",[[1,12114,"- 哨兵："]],[12114,12114],[12119,12119]]],[1574154142002,["GJX@GJXAIOUPC",[[1,12120,"- \n"]],[12119,12119],[12122,12122]]],[1574154155625,["GJX@GJXAIOUPC",[[1,12122,"主要是在 Redis 2.0 中的，用于对主服务器进行监控\n- 功能一：监控主数据库和从数据库是否正常运行；\n- 功能二：主数据库出现故障时候，可以自动将从数据库转换为主数据库，实现自动切换；"]],[12122,12122],[12218,12218]]],[1574154160834,["GJX@GJXAIOUPC",[[1,12120,"  "],[1,12152,"  "],[1,12177,"  "]],[12120,12216],[12120,12222]]],[1574154164162,["GJX@GJXAIOUPC",[[-1,12069,"\n"]],[12069,12069],[12068,12068]]],[1574154166459,["GJX@GJXAIOUPC",[[1,12113,"\n"]],[12113,12113],[12114,12114]]],[1574154401968,["GJX@GJXAIOUPC",[[1,12225,"  - \n"]],[12224,12224],[12229,12229]]],[1574154403090,["GJX@GJXAIOUPC",[[1,12229,"- **redis持久化的两种方式：RDB 方式和 AOF**"]],[12229,12229],[12260,12260]]],[1574154405602,["GJX@GJXAIOUPC",[[-1,12229,"- **"]],[12229,12233],[12229,12229]]],[1574154407800,["GJX@GJXAIOUPC",[[-1,12254,"**"]],[12256,12256],[12254,12254]]],[1574154447992,["GJX@GJXAIOUPC",[[1,12153,"（）"]],[12153,12153],[12155,12155]]],[1574154449228,["GJX@GJXAIOUPC",[[1,12154,"3.0 之后使用集群"]],[12154,12154],[12164,12164]]],[1574154477393,["GJX@GJXAIOUPC",[[1,12267,"\n"]],[12267,12267],[12268,12268]]],[1574154479465,["GJX@GJXAIOUPC",[[1,12279,"\n"]],[12278,12278],[12279,12279]]],[1574154479606,["GJX@GJXAIOUPC",[[1,12280,"\n"]],[12279,12279],[12280,12280]]],[1574154479781,["GJX@GJXAIOUPC",[[1,12281,"\n"]],[12280,12280],[12281,12281]]],[1574154496622,["GJX@GJXAIOUPC",[[1,12280,"- 收下"]],[12280,12280],[12284,12284]]],[1574154497248,["GJX@GJXAIOUPC",[[-1,12282,"收下"]],[12284,12284],[12282,12282]]],[1574154518294,["GJX@GJXAIOUPC",[[1,12282,"首先将 Redis 中的相关属性以 redis.properties cunc"]],[12282,12282],[12321,12321]]],[1574154519049,["GJX@GJXAIOUPC",[[-1,12317,"cunc"]],[12321,12321],[12317,12317]]],[1574154521092,["GJX@GJXAIOUPC",[[1,12317,"存储；"]],[12317,12317],[12320,12320]]],[1574154521498,["GJX@GJXAIOUPC",[[1,12321,"- \n"]],[12320,12320],[12323,12323]]],[1574154583013,["GJX@GJXAIOUPC",[[1,12279,"这是使用 Redis 官方推荐的"]],[12279,12279],[12295,12295]]],[1574154590388,["GJX@GJXAIOUPC",[[1,12295,"Java"]],[12295,12295],[12299,12299]]],[1574154590443,["GJX@GJXAIOUPC",[[1,12295," "]],[12299,12299],[12300,12300]]],[1574154598608,["GJX@GJXAIOUPC",[[1,12300," 连接开发工具：JRedis"]],[12300,12300],[12314,12314]]],[1574154605145,["GJX@GJXAIOUPC",[[-1,12309,"R"]],[12310,12310],[12309,12309]]],[1574154647693,["GJX@GJXAIOUPC",[[1,12357,"同样需要在 "]],[12357,12357],[12363,12363]]],[1574154653574,["GJX@GJXAIOUPC",[[1,12363,"spring-redis.xnl"]],[12363,12363],[12379,12379]]],[1574154654367,["GJX@GJXAIOUPC",[[-1,12377,"nl"]],[12379,12379],[12377,12377]]],[1574154660582,["GJX@GJXAIOUPC",[[1,12377,"ml 中配置redis"]],[12377,12377],[12388,12388]]],[1574154660636,["GJX@GJXAIOUPC",[[1,12383," "]],[12388,12388],[12389,12389]]],[1574154688667,["GJX@GJXAIOUPC",[[1,12389," 的连接池、"]],[12389,12389],[12395,12395]]],[1574154689850,["GJX@GJXAIOUPC",[[-1,12394,"、"]],[12395,12395],[12394,12394]]],[1574154691038,["GJX@GJXAIOUPC",[[1,12394,"（）"]],[12394,12394],[12396,12396]]],[1574154705310,["GJX@GJXAIOUPC",[[1,12395,"包括：最大空闲链接"]],[12395,12395],[12404,12404]]],[1574154705904,["GJX@GJXAIOUPC",[[-1,12402,"链接"]],[12404,12404],[12402,12402]]],[1574154707892,["GJX@GJXAIOUPC",[[1,12402,"连接"]],[12402,12402],[12404,12404]]],[1574154723517,["GJX@GJXAIOUPC",[[1,12405,"，最大等待时间、链接"]],[12405,12405],[12415,12415]]],[1574154724170,["GJX@GJXAIOUPC",[[-1,12413,"链接"]],[12415,12415],[12413,12413]]],[1574154733141,["GJX@GJXAIOUPC",[[1,12413,"获取连接时候检查有效性"]],[12413,12413],[12424,12424]]],[1574154753382,["GJX@GJXAIOUPC",[[1,12425,"；"]],[12425,12425],[12426,12426]]],[1574154753666,["GJX@GJXAIOUPC",[[1,12427,"- \n"]],[12426,12426],[12429,12429]]],[1574154756921,["GJX@GJXAIOUPC",[[1,12429,"这里"]],[12429,12429],[12431,12431]]],[1574154829212,[null,[[-1,12404,"）"],[1,12405,"数"],[-1,12424,"\n"],[1,12425,"）"],[1,12432,"\n"]],[12404,12404],[12433,12433]]],[1574154829212,[null,[[1,12404,"）"],[-1,12404,"数"],[1,12424,"\n"],[-1,12424,"）"],[-1,12432,"\n"]],[12433,12433],[12404,12404]]],[1574154769512,["GJX@GJXAIOUPC",[[1,12431,"初始化"]],[12431,12431],[12434,12434]]],[1574154771603,["GJX@GJXAIOUPC",[[-1,12431,"初始化"]],[12434,12434],[12431,12431]]],[1574154774014,["GJX@GJXAIOUPC",[[1,12431,"创建"]],[12431,12431],[12433,12433]]],[1574154778116,["GJX@GJXAIOUPC",[[-1,12427,"- 这里创建"]],[12433,12433],[12427,12427]]],[1574154778680,["GJX@GJXAIOUPC",[[-1,12428,"\n"]],[12427,12427],[12426,12426]]],[1574154814415,["GJX@GJXAIOUPC",[[1,12426,"这里创建 Redis 连接池的方式使用构造函数进行相关属性的注入（）"]],[12426,12426],[12460,12460]]],[1574154826533,["GJX@GJXAIOUPC",[[1,12459,"包括用户名、连接池、端口等"]],[12459,12459],[12472,12472]]],[1574154889213,[null,[[-1,12404,"）"],[1,12405,"数"],[-1,12424,"\n"],[1,12425,"）"]],[12404,12404],[12426,12426]]],[1574154889213,[null,[[1,12404,"）"],[-1,12404,"数"],[1,12424,"\n"],[-1,12424,"）"]],[12426,12426],[12404,12404]]],[1574154857396,["GJX@GJXAIOUPC",[[1,12473,"；同样将 Redis 的工具类进行配置；"]],[12473,12473],[12493,12493]]],[1574154917041,[null,[[-1,12404,"）"],[1,12405,"数"],[-1,12424,"\n"],[1,12425,"）"]],[12404,12404],[12426,12426]]],[1574154917041,[null,[[1,12404,"）"],[-1,12404,"数"],[1,12424,"\n"],[-1,12424,"）"]],[12426,12426],[12404,12404]]],[1574154906422,["GJX@GJXAIOUPC",[[1,12381,"加载 redis "]],[12381,12381],[12389,12389]]],[1574154907205,["GJX@GJXAIOUPC",[[1,12389,"。"]],[12389,12389],[12390,12390]]],[1574154907634,["GJX@GJXAIOUPC",[[-1,12389,"。"]],[12390,12390],[12389,12389]]],[1574154910601,["GJX@GJXAIOUPC",[[1,12389,".properi"]],[12389,12389],[12397,12397]]],[1574154911624,["GJX@GJXAIOUPC",[[-1,12396,"i"]],[12397,12397],[12396,12396]]],[1574154914860,["GJX@GJXAIOUPC",[[1,12396,"ties，"]],[12396,12396],[12401,12401]]],[1574155069946,[null,[[-1,12425,"）"],[1,12426,"数"],[-1,12445,"\n"],[1,12446,"）"]],[12425,12425],[12447,12447]]],[1574155069946,[null,[[1,12425,"）"],[-1,12425,"数"],[1,12445,"\n"],[-1,12445,"）"]],[12447,12447],[12425,12425]]],[1574155049473,["GJX@GJXAIOUPC",[[1,12515,"- \n"]],[12514,12514],[12517,12517]]],[1574155065479,["GJX@GJXAIOUPC",[[1,12517,"实现一个 Redis 公路类"]],[12517,12517],[12531,12531]]],[1574155066401,["GJX@GJXAIOUPC",[[-1,12528,"公路类"]],[12531,12531],[12528,12528]]],[1574155068839,["GJX@GJXAIOUPC",[[1,12528,"工具类，"]],[12528,12528],[12532,12532]]]],null,"GJX@GJXAIOUPC"]]}